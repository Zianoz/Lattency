// <auto-generated />
using System;
using Lattency.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lattency.Migrations
{
    [DbContext(typeof(LattencyDBContext))]
    [Migration("20251001222327_UsernameNullableandFullName")]
    partial class UsernameNullableandFullName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lattency.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FK_CafeTableId")
                        .HasColumnType("int");

                    b.Property<int>("FK_PersonId")
                        .HasColumnType("int");

                    b.Property<int>("NumGuests")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FK_CafeTableId");

                    b.HasIndex("FK_PersonId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Lattency.Models.CafeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BildURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CafeTables");
                });

            modelBuilder.Entity("Lattency.Models.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Dishes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Rich and bold single shot of espresso",
                            DishName = "Espresso",
                            IsPopular = true,
                            MenuId = 4,
                            Price = 25m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Espresso with steamed milk and foam",
                            DishName = "Cappuccino",
                            IsPopular = false,
                            MenuId = 4,
                            Price = 39m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Smooth espresso with lots of steamed milk",
                            DishName = "Latte",
                            IsPopular = true,
                            MenuId = 4,
                            Price = 42m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cold espresso with milk over ice",
                            DishName = "Iced Latte",
                            IsPopular = false,
                            MenuId = 4,
                            Price = 45m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Creamy green tea latte",
                            DishName = "Matcha Latte",
                            IsPopular = false,
                            MenuId = 4,
                            Price = 49m
                        },
                        new
                        {
                            Id = 6,
                            Description = "Classic cocoa with whipped cream",
                            DishName = "Hot Chocolate",
                            IsPopular = false,
                            MenuId = 4,
                            Price = 35m
                        },
                        new
                        {
                            Id = 7,
                            Description = "Spiced tea latte with cinnamon and cardamom",
                            DishName = "Chai Latte",
                            IsPopular = false,
                            MenuId = 4,
                            Price = 44m
                        },
                        new
                        {
                            Id = 15,
                            Description = "Sweet and creamy milk tea with brown sugar pearls",
                            DishName = "Brown Sugar Boba Tea",
                            IsPopular = true,
                            MenuId = 4,
                            Price = 55m
                        },
                        new
                        {
                            Id = 16,
                            Description = "Refreshing strawberry milk tea with chewy tapioca pearls",
                            DishName = "Strawberry Boba Tea",
                            IsPopular = false,
                            MenuId = 4,
                            Price = 55m
                        },
                        new
                        {
                            Id = 8,
                            Description = "Flaky butter croissant",
                            DishName = "Croissant",
                            IsPopular = false,
                            MenuId = 5,
                            Price = 29m
                        },
                        new
                        {
                            Id = 9,
                            Description = "Buttery pastry filled with chocolate",
                            DishName = "Pain au Chocolat",
                            IsPopular = false,
                            MenuId = 5,
                            Price = 34m
                        },
                        new
                        {
                            Id = 10,
                            Description = "Sweet bun with cinnamon filling",
                            DishName = "Cinnamon Bun",
                            IsPopular = true,
                            MenuId = 5,
                            Price = 32m
                        },
                        new
                        {
                            Id = 11,
                            Description = "Soft muffin with fresh blueberries",
                            DishName = "Blueberry Muffin",
                            IsPopular = false,
                            MenuId = 5,
                            Price = 36m
                        },
                        new
                        {
                            Id = 12,
                            Description = "Moist cake with cream cheese frosting",
                            DishName = "Carrot Cake",
                            IsPopular = false,
                            MenuId = 5,
                            Price = 45m
                        },
                        new
                        {
                            Id = 13,
                            Description = "Creamy cheesecake with berry topping",
                            DishName = "Cheesecake",
                            IsPopular = false,
                            MenuId = 5,
                            Price = 55m
                        },
                        new
                        {
                            Id = 14,
                            Description = "Classic cheesecake topped with fresh strawberries",
                            DishName = "Strawberry Cheesecake",
                            IsPopular = true,
                            MenuId = 5,
                            Price = 59m
                        });
                });

            modelBuilder.Entity("Lattency.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Name = "Drinks"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pastries"
                        });
                });

            modelBuilder.Entity("Lattency.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Lattency.Models.Booking", b =>
                {
                    b.HasOne("Lattency.Models.CafeTable", "CafeTable")
                        .WithMany("Bookings")
                        .HasForeignKey("FK_CafeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lattency.Models.Person", "Person")
                        .WithMany("Bookings")
                        .HasForeignKey("FK_PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CafeTable");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Lattency.Models.Dish", b =>
                {
                    b.HasOne("Lattency.Models.Menu", null)
                        .WithMany("Dishes")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lattency.Models.CafeTable", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Lattency.Models.Menu", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("Lattency.Models.Person", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
